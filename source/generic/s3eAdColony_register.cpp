/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eAdColony_autodefs.h"
#include "s3eEdk.h"
#include "s3eAdColony.h"
//Declarations of Init and Term functions
extern s3eResult s3eAdColonyInit();
extern void s3eAdColonyTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eAdColonyStart_wrap()
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony func on main thread: s3eAdColonyStart"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdColonyStart, 0);
}

static void s3ePlayVideoAdForSlot_wrap(int slotNumber)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony func on main thread: s3ePlayVideoAdForSlot"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePlayVideoAdForSlot, 1, slotNumber);
}

static void s3ePlayVideoAdForZone_wrap(const char* pszZoneID)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony func on main thread: s3ePlayVideoAdForZone"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePlayVideoAdForZone, 1, pszZoneID);
}

static void s3ePlayV4VCForSlot_wrap(int slotNumber, s3eBool PrePopup, s3eBool PostPopup)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony func on main thread: s3ePlayV4VCForSlot"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePlayV4VCForSlot, 3, slotNumber, PrePopup, PostPopup);
}

static void s3ePlayV4VCForZone_wrap(const char* pszZoneID, s3eBool PrePopup, s3eBool PostPopup)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony func on main thread: s3ePlayV4VCForZone"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3ePlayV4VCForZone, 3, pszZoneID, PrePopup, PostPopup);
}

static s3eBool s3eVideoAdCurrentlyRunning_wrap()
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony func on main thread: s3eVideoAdCurrentlyRunning"));
    return (s3eBool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eVideoAdCurrentlyRunning, 0);
}

#define s3eAdColonyStart s3eAdColonyStart_wrap
#define s3ePlayVideoAdForSlot s3ePlayVideoAdForSlot_wrap
#define s3ePlayVideoAdForZone s3ePlayVideoAdForZone_wrap
#define s3ePlayV4VCForSlot s3ePlayV4VCForSlot_wrap
#define s3ePlayV4VCForZone s3ePlayV4VCForZone_wrap
#define s3eVideoAdCurrentlyRunning s3eVideoAdCurrentlyRunning_wrap

#endif

s3eResult s3eAdColonyRegister(s3eAdColonyCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_ADCOLONY_HASH, S3E_ADCOLONY_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eAdColonyUnRegister(s3eAdColonyCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_ADCOLONY_HASH, S3E_ADCOLONY_CALLBACK_MAX, cbid, fn);
}

void s3eAdColonyRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[8];
    funcPtrs[0] = (void*)s3eAdColonyRegister;
    funcPtrs[1] = (void*)s3eAdColonyUnRegister;
    funcPtrs[2] = (void*)s3eAdColonyStart;
    funcPtrs[3] = (void*)s3ePlayVideoAdForSlot;
    funcPtrs[4] = (void*)s3ePlayVideoAdForZone;
    funcPtrs[5] = (void*)s3ePlayV4VCForSlot;
    funcPtrs[6] = (void*)s3ePlayV4VCForZone;
    funcPtrs[7] = (void*)s3eVideoAdCurrentlyRunning;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[8] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eAdColony", funcPtrs, sizeof(funcPtrs), flags, s3eAdColonyInit, s3eAdColonyTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eAdColonyStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eAdColonyRegisterExt;
    return 0;
}

int g_s3eAdColonyVal = s3eAdColonyStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eAdColonyRegisterExt();
}
#endif

#endif

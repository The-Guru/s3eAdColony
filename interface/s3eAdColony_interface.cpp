/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eAdColony.h"

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eAdColonyRegister_t)(s3eAdColonyCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eAdColonyUnRegister_t)(s3eAdColonyCallback cbid, s3eCallback fn);
typedef       void(*s3eAdColonyStart_t)();
typedef       void(*s3ePlayVideoAdForSlot_t)(int slotNumber);
typedef       void(*s3ePlayVideoAdForZone_t)(const char* pszZoneID);
typedef       void(*s3ePlayV4VCForSlot_t)(int slotNumber, s3eBool PrePopup, s3eBool PostPopup);
typedef       void(*s3ePlayV4VCForZone_t)(const char* pszZoneID, s3eBool PrePopup, s3eBool PostPopup);
typedef    s3eBool(*s3eVideoAdCurrentlyRunning_t)();

/**
 * struct that gets filled in by s3eAdColonyRegister
 */
typedef struct s3eAdColonyFuncs
{
    s3eAdColonyRegister_t m_s3eAdColonyRegister;
    s3eAdColonyUnRegister_t m_s3eAdColonyUnRegister;
    s3eAdColonyStart_t m_s3eAdColonyStart;
    s3ePlayVideoAdForSlot_t m_s3ePlayVideoAdForSlot;
    s3ePlayVideoAdForZone_t m_s3ePlayVideoAdForZone;
    s3ePlayV4VCForSlot_t m_s3ePlayV4VCForSlot;
    s3ePlayV4VCForZone_t m_s3ePlayV4VCForZone;
    s3eVideoAdCurrentlyRunning_t m_s3eVideoAdCurrentlyRunning;
} s3eAdColonyFuncs;

static s3eAdColonyFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x1cf88da9, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eAdColony");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x1cf88da9, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eAdColonyAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eAdColonyRegister(s3eAdColonyCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony[0] func: s3eAdColonyRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eAdColonyRegister(cbid, fn, userData);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eAdColonyUnRegister(s3eAdColonyCallback cbid, s3eCallback fn)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony[1] func: s3eAdColonyUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eAdColonyUnRegister(cbid, fn);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eAdColonyStart()
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony[2] func: s3eAdColonyStart"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eAdColonyStart();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3ePlayVideoAdForSlot(int slotNumber)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony[3] func: s3ePlayVideoAdForSlot"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3ePlayVideoAdForSlot(slotNumber);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3ePlayVideoAdForZone(const char* pszZoneID)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony[4] func: s3ePlayVideoAdForZone"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3ePlayVideoAdForZone(pszZoneID);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3ePlayV4VCForSlot(int slotNumber, s3eBool PrePopup, s3eBool PostPopup)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony[5] func: s3ePlayV4VCForSlot"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3ePlayV4VCForSlot(slotNumber, PrePopup, PostPopup);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3ePlayV4VCForZone(const char* pszZoneID, s3eBool PrePopup, s3eBool PostPopup)
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony[6] func: s3ePlayV4VCForZone"));

    if (!_extLoad())
        return;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3ePlayV4VCForZone(pszZoneID, PrePopup, PostPopup);

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eBool s3eVideoAdCurrentlyRunning()
{
    IwTrace(ADCOLONY_VERBOSE, ("calling s3eAdColony[7] func: s3eVideoAdCurrentlyRunning"));

    if (!_extLoad())
        return S3E_FALSE;

#ifdef __mips
    // For MIPs platform we do not have asm code for stack switching 
    // implemented. So we make LoaderCallStart call manually to set GlobalLock
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eBool ret = g_Ext.m_s3eVideoAdCurrentlyRunning();

#ifdef __mips
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
